const Meal = require("../models/Meal");
const ErrorResponse = require("../utils/errorResponse");
const asyncHandler = require("../middleware/async");



exports.getAllMeals = asyncHandler(async (req, res, next) => {
    const meals = await Meal.find();
    res.status(200).json({
        success: true,
        count: meals.length,
        data: meals,
    });
});



exports.getMealById = asyncHandler(async (req, res, next) => {
    const meal = await Meal.findById(req.params.id);
    if (!meal) {
        return next(
            new ErrorResponse(`Meal not found with id of ${req.params.id}`, 404)
        );
    }
    res.status(200).json({
        success: true,
        data: meal,
    });
});




exports.createMeal = asyncHandler(async (req, res, next) => {
    const meal = await Meal.create(req.body);
    res.status(201).json({
        success: true,
        data: meal,
    });
});



exports.updateMeal = asyncHandler(async (req, res, next) => {
    let meal = await Meal.findById(req.params.id);
    if (!meal) {
        return next(
            new ErrorResponse(`Meal not found with id of ${req.params.id}`, 404)
        );
    }

    if (meal.user.toString() !== req.user.id && req.user.role !== "admin") {
        return next(
            new ErrorResponse(
                `User ${req.user.id} is not authorized to update this meal`,
                401
            )
        );
    }

    meal = await Meal.findByIdAndUpdate(req.params.id, req.body, {
        new: true,
        runValidators: true,
    });
    res.status(200).json({
        success: true,
        data: meal,
    });
});


exports.deleteMeal = asyncHandler(async (req, res, next) => {
    const meal = await Meal.findById(req.params.id);
    if (!meal) {
        return next(
            new ErrorResponse(`Meal not found with id of ${req.params.id}`, 404)
        );
    }

    if (meal.user.toString() !== req.user.id && req.user.role !== "admin") {
        return next(
            new ErrorResponse(
                `User ${req.user.id} is not authorized to delete this meal`,
                401
            )
        );
    }
    await meal.remove();
    res.status(200).json({
        success: true,
        data: {},
    });
});
